@model panelOrmo.Models.CollectionProductEditViewModel
@{
    ViewData["Title"] = "Edit Collection Product";
    Layout = "_Layout";
    var collectionGroups = ViewBag.CollectionGroups as List<panelOrmo.Models.CollectionGroup>;
    var existingImages = ViewBag.ExistingImages as List<panelOrmo.Models.ProductImage> ?? new List<panelOrmo.Models.ProductImage>();
}

<style>
    .image-upload-section {
        background: white;
        border: 1px solid #dee2e6;
        border-radius: 10px;
    }

    .image-pair {
        background: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 8px;
        transition: all 0.2s ease;
        position: relative;
        overflow: hidden;
    }

        .image-pair:hover {
            border-color: #007bff;
        }

    .existing-image-pair {
        background: #fff3cd;
        border: 1px solid #ffc107;
        border-radius: 8px;
        transition: all 0.2s ease;
        position: relative;
        overflow: hidden;
    }

        .existing-image-pair:hover {
            border-color: #ffb300;
        }

    .existing-pair-header, .image-pair-header {
        background: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
        padding: 8px 12px;
        margin: -1px -1px 12px -1px;
        border-radius: 7px 7px 0 0;
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 0.875rem;
        font-weight: 600;
        color: #495057;
    }

    .existing-pair-header {
        background: #fff3cd;
        border-bottom-color: #ffc107;
    }

    .image-input-group {
        margin-bottom: 12px;
    }

    .image-input-label {
        display: block;
        background: #f8f9fa;
        border: 2px dashed #dee2e6;
        border-radius: 6px;
        padding: 15px;
        text-align: center;
        cursor: pointer;
        transition: all 0.2s ease;
        min-height: 70px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        position: relative;
    }

        .image-input-label:hover {
            background: #e9ecef;
            border-color: #007bff;
        }

        .image-input-label i {
            font-size: 1.2rem;
            color: #6c757d;
            margin-bottom: 4px;
            pointer-events: none;
        }

        .image-input-label:hover i {
            color: #007bff;
        }

        .image-input-label span {
            pointer-events: none;
        }

    .file-input {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
        cursor: pointer;
        z-index: 1;
    }

    .add-image-btn {
        background: #007bff;
        border: none;
        color: white;
        padding: 6px 12px;
        border-radius: 6px;
        font-size: 0.875rem;
        font-weight: 500;
        transition: all 0.2s ease;
    }

        .add-image-btn:hover {
            background: #0056b3;
        }

    .remove-pair-btn {
        background: #dc3545;
        border: none;
        color: white;
        width: 24px;
        height: 24px;
        border-radius: 4px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
        font-size: 0.75rem;
    }

        .remove-pair-btn:hover {
            background: #c82333;
        }

    .upload-header {
        background: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
        border-radius: 9px 9px 0 0;
        padding: 12px 15px;
        margin: -1px -1px 15px -1px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

        .upload-header h6 {
            color: #495057;
            font-weight: 600;
            margin: 0;
        }

    .file-selected {
        background: #d4edda !important;
        border-color: #28a745 !important;
        color: #155724;
    }

        .file-selected i {
            color: #28a745 !important;
        }

    .existing-image-thumbnail {
        width: 60px;
        height: 60px;
        object-fit: cover;
        border-radius: 8px;
        border: 2px solid #dee2e6;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        transition: all 0.2s ease;
    }

        .existing-image-thumbnail:hover {
            transform: scale(1.05);
            border-color: #007bff;
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        }

    .image-preview-container {
        background: white;
        border-radius: 8px;
        padding: 15px;
        border: 1px solid #e9ecef;
        margin-bottom: 15px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.05);
    }

    .image-preview-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 15px;
        align-items: start;
    }

    .image-preview-item {
        text-align: center;
    }

    .image-preview-label {
        font-size: 0.75rem;
        font-weight: 600;
        color: #6c757d;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        margin-bottom: 8px;
        display: block;
    }

    .no-image-placeholder {
        width: 60px;
        height: 60px;
        background: #f8f9fa;
        border: 2px dashed #dee2e6;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #6c757d;
        font-size: 1.2rem;
    }

    .section-divider {
        border-top: 1px solid #dee2e6;
        margin: 15px 0;
    }

    .marked-for-deletion {
        opacity: 0.6 !important;
        background: #f8d7da !important;
        border-color: #dc3545 !important;
    }

        .marked-for-deletion .existing-image-thumbnail {
            filter: grayscale(100%) brightness(0.7);
        }

    .restore-btn {
        background: #28a745;
        border: none;
        color: white;
        width: 24px;
        height: 24px;
        border-radius: 4px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
        font-size: 0.75rem;
    }

        .restore-btn:hover {
            background: #1e7e34;
        }

    .replace-section {
        border-top: 1px solid #e9ecef;
        padding-top: 12px;
        margin-top: 12px;
    }

    .replace-section .image-input-label {
        min-height: 50px;
        padding: 10px;
    }

    .image-count-badge {
        background: #007bff;
        color: white;
        font-size: 0.7rem;
        padding: 2px 6px;
        border-radius: 10px;
        font-weight: 600;
    }
</style>

<div class="d-flex justify-content-between align-items-center mb-3">
    <h2>Edit Collection Product</h2>
    <a href="/CollectionProducts/Index" class="btn btn-secondary">
        <i class="fas fa-arrow-left me-2"></i>Back to List
    </a>
</div>

<form action="/CollectionProducts/Edit/@ViewContext.RouteData.Values["id"]" method="post" enctype="multipart/form-data" id="productForm">
    <div class="row">
        <div class="col-md-8">
            <div class="card">
                <div class="card-body">
                    <div class="mb-3">
                        <label for="Product_ProductCode" class="form-label">Product Code *</label>
                        <input name="Product.ProductCode" id="Product_ProductCode" class="form-control" placeholder="Enter product code" value="@Model.Product.ProductCode" required />
                    </div>

                    <div class="mb-3">
                        <label for="Product_CollectionGroupID" class="form-label">Collection Group *</label>
                        <select name="Product.CollectionGroupID" id="Product_CollectionGroupID" class="form-select" required>
                            <option value="">Select Collection Group</option>
                            @if (collectionGroups != null)
                            {
                                @foreach (var group in collectionGroups)
                                {
                                    <option value="@group.DID" selected="@(Model.Product.CollectionGroupID == group.DID)">@group.DName</option>
                                }
                            }
                        </select>
                    </div>

                    <div class="mb-3">
                        <label for="Product_Content" class="form-label">Product Content *</label>
                        <textarea name="Product.Content" id="Product_Content" class="form-control" rows="5" placeholder="Enter product details and ingredients" required>@Model.Product.Content</textarea>
                        <div class="form-text">Content will be automatically wrapped in &lt;p&gt; tags</div>
                    </div>

                    <div class="form-check mb-3">
                        <input name="Product.IsActive" id="Product_IsActive" class="form-check-input" type="checkbox" value="true" checked="@Model.Product.IsActive" />
                        <label for="Product_IsActive" class="form-check-label">Active</label>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card image-upload-section">
                <div class="upload-header">
                    <h6>
                        Product Images 
                        @if (existingImages.Any())
                        {
                            <span class="image-count-badge">@existingImages.Count</span>
                        }
                    </h6>
                    <button type="button" class="add-image-btn" onclick="addImagePair()">
                        <i class="fas fa-plus me-1"></i>Add Pair
                    </button>
                </div>
                <div class="card-body">
                    <!-- Existing Images Section -->
                    @if (existingImages.Any())
                    {
                        <div class="mb-3">
                            <h6 class="text-muted mb-2">
                                <i class="fas fa-folder-open me-1"></i>
                                Existing Images (@existingImages.Count)
                            </h6>
                            <div id="existingImagesContainer">
                                @for (int i = 0; i < existingImages.Count; i++)
                                {
                                    <div class="existing-image-pair mb-2 p-2" data-image-id="@existingImages[i].PIID">
                                        <div class="existing-pair-header">
                                            <span>Existing Pair @(i + 1)</span>
                                            <button type="button" class="remove-pair-btn" onclick="markImageForDeletion(@existingImages[i].PIID, this)">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>

                                        <!-- Current Images Preview -->
                                        <div class="image-preview-container">
                                            <div class="image-preview-grid">
                                                <div class="image-preview-item">
                                                    <span class="image-preview-label">Small Image</span>
                                                    @if (!string.IsNullOrEmpty(existingImages[i].PISmallImage))
                                                    {
                                                        var smallImageUrl = existingImages[i].PISmallImage.StartsWith("/Image/") 
                                                            ? existingImages[i].PISmallImage
                                                            : $"/Image/small/{existingImages[i].PISmallImage}";
                                                        <img src="@smallImageUrl" class="existing-image-thumbnail" alt="Small image" title="Click to view full size" onclick="viewFullImage('@smallImageUrl', 'Small Image')">
                                                    }
                                                    else
                                                    {
                                                        <div class="no-image-placeholder">
                                                            <i class="fas fa-image"></i>
                                                        </div>
                                                    }
                                                </div>
                                                <div class="image-preview-item">
                                                    <span class="image-preview-label">Medium Image</span>
                                                    @if (!string.IsNullOrEmpty(existingImages[i].PIMediumImage))
                                                    {
                                                        var mediumImageUrl = existingImages[i].PIMediumImage.StartsWith("/Image/")
                                                        ? existingImages[i].PIMediumImage
                                                        : $"/Image/medium/{existingImages[i].PIMediumImage}";
                                                        <img src="@mediumImageUrl" class="existing-image-thumbnail" alt="Medium image" title="Click to view full size" onclick="viewFullImage('@mediumImageUrl', 'Medium Image')">
                                                    }
                                                    else
                                                    {
                                                        <div class="no-image-placeholder">
                                                            <i class="fas fa-image"></i>
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        </div>

                                        <!-- Replace Options -->
                                        <div class="replace-section">
                                            <div class="image-input-group">
                                                <label class="image-input-label">
                                                    <i class="fas fa-sync-alt"></i>
                                                    <span class="small">Replace Small</span>
                                                    <input name="ExistingImages[@i].NewSmallImage" type="file" class="file-input" accept="image/jpeg" onchange="handleFileSelect(this)" />
                                                    <input type="hidden" name="ExistingImages[@i].PIID" value="@existingImages[i].PIID" />
                                                </label>
                                            </div>
                                            <div class="image-input-group">
                                                <label class="image-input-label">
                                                    <i class="fas fa-sync-alt"></i>
                                                    <span class="small">Replace Medium</span>
                                                    <input name="ExistingImages[@i].NewMediumImage" type="file" class="file-input" accept="image/jpeg" onchange="handleFileSelect(this)" />
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                            <div class="section-divider"></div>
                        </div>
                    }
                    else
                    {
                        <div class="mb-3">
                            <div class="text-center py-3">
                                <i class="fas fa-images fa-2x text-muted mb-2"></i>
                                <p class="text-muted mb-0">No existing images found</p>
                                <small class="text-muted">Add new image pairs below</small>
                            </div>
                            <div class="section-divider"></div>
                        </div>
                    }

                    <!-- New Images Section -->
                    <div>
                        <h6 class="text-muted mb-2"><i class="fas fa-plus-circle me-1"></i>Add New Images</h6>
                        <div id="imagePairsContainer">
                            <!-- Initial new image pair -->
                            <div class="image-pair mb-2 p-2" data-index="0">
                                <div class="image-pair-header">
                                    <span>New Pair 1</span>
                                    <button type="button" class="remove-pair-btn d-none" onclick="removeImagePair(this)">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>

                                <div class="image-input-group">
                                    <label class="image-input-label" for="new-small-0">
                                        <i class="fas fa-image"></i>
                                        <span class="small">Small Image</span>
                                        <input name="NewImagePairs[0].SmallImage" id="new-small-0" type="file" class="file-input" accept="image/jpeg" onchange="handleFileSelect(this)" />
                                    </label>
                                </div>

                                <div class="image-input-group">
                                    <label class="image-input-label" for="new-medium-0">
                                        <i class="fas fa-image"></i>
                                        <span class="small">Medium Image</span>
                                        <input name="NewImagePairs[0].MediumImage" id="new-medium-0" type="file" class="file-input" accept="image/jpeg" onchange="handleFileSelect(this)" />
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Hidden field to track deleted images -->
    <input type="hidden" id="deletedImages" name="DeletedImageIds" value="" />

    <div class="d-flex gap-2 mt-3">
        <button type="submit" class="btn btn-primary">
            <i class="fas fa-save me-2"></i>Save Changes
        </button>
        <a href="/CollectionProducts/Index" class="btn btn-secondary">Cancel</a>
    </div>
</form>

<!-- Image Preview Modal -->
<div class="modal fade" id="imagePreviewModal" tabindex="-1" aria-labelledby="imagePreviewModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="imagePreviewModalLabel">Image Preview</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <img id="previewImage" src="" class="img-fluid" alt="Preview" style="max-height: 500px;">
            </div>
        </div>
    </div>
</div>

<script>
    let imagePairIndex = 1;
    let deletedImageIds = [];

    function addImagePair() {
        const container = document.getElementById('imagePairsContainer');
        const pairCount = container.children.length + 1;

        const newPair = document.createElement('div');
        newPair.className = 'image-pair mb-2 p-2';
        newPair.setAttribute('data-index', imagePairIndex);

        newPair.innerHTML = '<div class="image-pair-header">' +
            '<span>New Pair ' + pairCount + '</span>' +
            '<button type="button" class="remove-pair-btn" onclick="removeImagePair(this)">' +
            '<i class="fas fa-times"></i>' +
            '</button>' +
            '</div>' +
            '<div class="image-input-group">' +
            '<label class="image-input-label" for="new-small-' + imagePairIndex + '">' +
            '<i class="fas fa-image"></i>' +
            '<span class="small">Small Image</span>' +
            '<input name="NewImagePairs[' + imagePairIndex + '].SmallImage" id="new-small-' + imagePairIndex + '" type="file" class="file-input" accept="image/jpeg" onchange="handleFileSelect(this)" />' +
            '</label>' +
            '</div>' +
            '<div class="image-input-group">' +
            '<label class="image-input-label" for="new-medium-' + imagePairIndex + '">' +
            '<i class="fas fa-image"></i>' +
            '<span class="small">Medium Image</span>' +
            '<input name="NewImagePairs[' + imagePairIndex + '].MediumImage" id="new-medium-' + imagePairIndex + '" type="file" class="file-input" accept="image/jpeg" onchange="handleFileSelect(this)" />' +
            '</label>' +
            '</div>';

        container.appendChild(newPair);
        imagePairIndex++;
        updateRemoveButtons();
    }

    function removeImagePair(button) {
        const pair = button.closest('.image-pair');
        pair.remove();
        renumberImagePairs();
        updateRemoveButtons();
    }

    function renumberImagePairs() {
        const pairs = document.querySelectorAll('.image-pair');
        pairs.forEach((pair, index) => {
            const title = pair.querySelector('.image-pair-header span');
            title.textContent = 'New Pair ' + (index + 1);

            const smallImageInput = pair.querySelector('input[type="file"]:first-of-type');
            const mediumImageInput = pair.querySelector('input[type="file"]:last-of-type');

            smallImageInput.name = 'NewImagePairs[' + index + '].SmallImage';
            mediumImageInput.name = 'NewImagePairs[' + index + '].MediumImage';
            smallImageInput.id = 'new-small-' + index;
            mediumImageInput.id = 'new-medium-' + index;

            const labels = pair.querySelectorAll('label');
            labels[0].setAttribute('for', 'new-small-' + index);
            labels[1].setAttribute('for', 'new-medium-' + index);

            pair.setAttribute('data-index', index);
        });
    }

    function updateRemoveButtons() {
        const pairs = document.querySelectorAll('.image-pair');
        const removeButtons = document.querySelectorAll('.image-pair .remove-pair-btn');

        removeButtons.forEach((button, index) => {
            if (pairs.length > 1) {
                button.classList.remove('d-none');
            } else {
                button.classList.add('d-none');
            }
        });
    }

    function markImageForDeletion(imageId, button) {
        if (confirm('Are you sure you want to delete this image pair? This action cannot be undone.')) {
            deletedImageIds.push(imageId);
            document.getElementById('deletedImages').value = deletedImageIds.join(',');

            const container = button.closest('.existing-image-pair');
            container.classList.add('marked-for-deletion');

            button.innerHTML = '<i class="fas fa-undo"></i>';
            button.className = 'restore-btn';
            button.onclick = function() { restoreImage(imageId, this); };

            const fileInputs = container.querySelectorAll('input[type="file"]');
            fileInputs.forEach(input => input.disabled = true);
        }
    }

    function restoreImage(imageId, button) {
        deletedImageIds = deletedImageIds.filter(id => id !== imageId);
        document.getElementById('deletedImages').value = deletedImageIds.join(',');

        const container = button.closest('.existing-image-pair');
        container.classList.remove('marked-for-deletion');

        button.innerHTML = '<i class="fas fa-trash"></i>';
        button.className = 'remove-pair-btn';
        button.onclick = function() { markImageForDeletion(imageId, this); };

        const fileInputs = container.querySelectorAll('input[type="file"]');
        fileInputs.forEach(input => input.disabled = false);
    }

    function handleFileSelect(input) {
        const label = input.closest('.image-input-label');
        const fileName = input.files[0] ? input.files[0].name : null;

        if (fileName) {
            label.classList.add('file-selected');
            const span = label.querySelector('span');
            if (span) {
                span.textContent = 'Selected: ' + (fileName.length > 15 ? fileName.substring(0, 15) + '...' : fileName);
            }

            const icon = label.querySelector('i');
            icon.className = 'fas fa-check-circle';
        } else {
            label.classList.remove('file-selected');
            const span = label.querySelector('span');
            if (span) {
                if (span.textContent.includes('Replace')) {
                    span.textContent = span.textContent.includes('Small') ? 'Replace Small' : 'Replace Medium';
                } else {
                    span.textContent = span.textContent.includes('Small') ? 'Small Image' : 'Medium Image';
                }
            }

            const icon = label.querySelector('i');
            if (label.querySelector('span').textContent.includes('Replace')) {
                icon.className = 'fas fa-sync-alt';
            } else {
                icon.className = 'fas fa-image';
            }
        }
    }

    function viewFullImage(imageSrc, imageType) {
        document.getElementById('previewImage').src = imageSrc;
        document.getElementById('imagePreviewModalLabel').textContent = imageType + ' - Full Size';
        const modal = new bootstrap.Modal(document.getElementById('imagePreviewModal'));
        modal.show();
    }
</script>