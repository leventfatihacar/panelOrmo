@model List<panelOrmo.Models.CollectionProduct>
@{
    ViewData["Title"] = "Collection Products Management";
    Layout = "_Layout";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h2 class="mb-1">
            <i class="fas fa-box me-2 text-info"></i>
            Collection Products Management
        </h2>
        <p class="text-muted mb-0">Manage your collection products and inventory</p>
    </div>
    <a href="/CollectionProducts/Create" class="btn btn-info btn-lg">
        <i class="fas fa-plus me-2"></i>Add New Product
    </a>
</div>

<!-- Statistics Cards -->
<div class="row mb-4">
    <div class="col-md-3">
        <div class="card bg-info text-white">
            <div class="card-body">
                <div class="d-flex align-items-center">
                    <div class="flex-grow-1">
                        <h3 class="mb-0">@Model.Count</h3>
                        <p class="mb-0">Total Products</p>
                    </div>
                    <div class="ms-3">
                        <i class="fas fa-box fa-2x opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-primary text-white">
            <div class="card-body">
                <div class="d-flex align-items-center">
                    <div class="flex-grow-1">
                        <h3 class="mb-0">@Model.Count(p => p.PIsValid)</h3>
                        <p class="mb-0">Active Products</p>
                    </div>
                    <div class="ms-3">
                        <i class="fas fa-check-circle fa-2x opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-danger text-white">
            <div class="card-body">
                <div class="d-flex align-items-center">
                    <div class="flex-grow-1">
                        <h3 class="mb-0">@Model.Count(p => !p.PIsValid)</h3>
                        <p class="mb-0">Inactive Products</p>
                    </div>
                    <div class="ms-3">
                        <i class="fas fa-pause-circle fa-2x opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-success text-white">
            <div class="card-body">
                <div class="d-flex align-items-center">
                    <div class="flex-grow-1">
                        <h3 class="mb-0">@Model.Count(p => !string.IsNullOrEmpty(p.PCode))</h3>
                        <p class="mb-0">With Product Code</p>
                    </div>
                    <div class="ms-3">
                        <i class="fas fa-barcode fa-2x opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Filters -->
<div class="card mb-4">
    <div class="card-header">
        <h5 class="mb-0">
            <i class="fas fa-filter me-2"></i>Filters & Search
        </h5>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-4">
                <label class="form-label">Search Products</label>
                <input type="text" class="form-control" id="searchInput" placeholder="Search by name or code...">
            </div>
            <div class="col-md-3">
                <label class="form-label">Product Code</label>
                <input type="text" class="form-control" id="codeFilter" placeholder="Filter by code...">
            </div>
            <div class="col-md-3">
                <label class="form-label">Status</label>
                <select class="form-select" id="statusFilter">
                    <option value="">All Status</option>
                    <option value="true">Active</option>
                    <option value="false">Inactive</option>
                </select>
            </div>
            <div class="col-md-2">
                <label class="form-label">&nbsp;</label>
                <button class="btn btn-outline-secondary w-100" onclick="clearFilters()">
                    <i class="fas fa-times me-1"></i>Clear
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Products Grid/Table Toggle -->
<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">
            <i class="fas fa-list me-2"></i>Collection Products List
        </h5>
        <div class="d-flex gap-2">
            <div class="btn-group" role="group">
                <input type="radio" class="btn-check" name="viewMode" id="gridView" checked>
                <label class="btn btn-outline-secondary btn-sm" for="gridView">
                    <i class="fas fa-th-large"></i> Grid
                </label>
                <input type="radio" class="btn-check" name="viewMode" id="tableView">
                <label class="btn btn-outline-secondary btn-sm" for="tableView">
                    <i class="fas fa-list"></i> Table
                </label>
            </div>
            <button class="btn btn-outline-primary btn-sm" onclick="location.reload()">
                <i class="fas fa-sync-alt me-1"></i>Refresh
            </button>
        </div>
    </div>
    <div class="card-body p-0">
        <!-- Grid View -->
        <div id="gridViewContent" class="p-3">
            <div class="row" id="productsGrid">
                @foreach (var product in Model)
                {
                    <div class="col-md-4 mb-3" data-code="@product.PCode" data-status="@product.PIsValid.ToString().ToLower()">
                        <div class="card h-100 product-card">
                            <div class="card-img-top bg-light d-flex align-items-center justify-content-center position-relative" style="height: 180px;">
                                <i class="fas fa-box fa-3x text-muted"></i>
                                @if (!string.IsNullOrEmpty(product.PCode))
                                {
                                    <span class="badge bg-primary position-absolute top-0 start-0 m-2">
                                        <i class="fas fa-barcode me-1"></i>@product.PCode
                                    </span>
                                }
                            </div>
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-start mb-2">
                                    <h5 class="card-title mb-0">@product.PName</h5>
                                    @if (product.PIsValid)
                                    {
                                        <span class="badge bg-success">Active</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-danger">Inactive</span>
                                    }
                                </div>
                                <p class="card-text text-muted small">
                                    @if (!string.IsNullOrEmpty(product.PInfoPreview))
                                    {
                                        @(product.PInfoPreview.Length > 80 ? product.PInfoPreview.Substring(0, 80) + "..." : product.PInfoPreview)
                                    }
                                    else
                                    {
                                        <em>No preview available</em>
                                    }
                                </p>
                                <div class="d-flex justify-content-between align-items-center">
                                    <small class="text-muted">
                                        <i class="fas fa-calendar me-1"></i>
                                        @product.PCreatedDate.ToString("dd/MM/yyyy")
                                    </small>
                                    <small class="text-muted">
                                        ID: @product.PID
                                    </small>
                                </div>
                            </div>
                            <div class="card-footer bg-transparent">
                                <div class="btn-group w-100" role="group">
                                    <a href="/CollectionProducts/Edit/@product.PID" class="btn btn-outline-primary btn-sm">
                                        <i class="fas fa-edit"></i> Edit
                                    </a>
                                    <button class="btn btn-outline-@(product.PIsValid ? "warning" : "success") btn-sm"
                                            onclick="toggleProductStatus(@product.PID, @product.PIsValid.ToString().ToLower())">
                                        <i class="fas fa-toggle-@(product.PIsValid ? "on" : "off")"></i>
                                        @(product.PIsValid ? "Disable" : "Enable")
                                    </button>
                                    <button class="btn btn-outline-danger btn-sm" onclick="deleteProduct(@product.PID)">
                                        <i class="fas fa-trash"></i> Delete
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Table View -->
        <div id="tableViewContent" style="display: none;">
            <div class="table-responsive">
                <table class="table table-hover mb-0" id="productsTable">
                    <thead class="table-light">
                        <tr>
                            <th width="80">ID</th>
                            <th width="120">Product Code</th>
                            <th>Name</th>
                            <th width="120">Status</th>
                            <th width="150">Created Date</th>
                            <th width="180" class="text-center">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var product in Model)
                        {
                            <tr data-code="@product.PCode" data-status="@product.PIsValid.ToString().ToLower()">
                                <td class="fw-bold text-info">#@product.PID</td>
                                <td>
                                    @if (!string.IsNullOrEmpty(product.PCode))
                                    {
                                        <span class="badge bg-primary">
                                            <i class="fas fa-barcode me-1"></i>@product.PCode
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">No Code</span>
                                    }
                                </td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div class="me-2 bg-light d-flex align-items-center justify-content-center" style="width: 40px; height: 40px; border-radius: 6px;">
                                            <i class="fas fa-box text-muted"></i>
                                        </div>
                                        <div>
                                            <div class="fw-bold">@product.PName</div>
                                            @if (!string.IsNullOrEmpty(product.PInfoPreview))
                                            {
                                                <small class="text-muted">@(product.PInfoPreview.Length > 50 ? product.PInfoPreview.Substring(0, 50) + "..." : product.PInfoPreview)</small>
                                            }
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    @if (product.PIsValid)
                                    {
                                        <span class="badge bg-success">
                                            <i class="fas fa-check me-1"></i>Active
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-danger">
                                            <i class="fas fa-times me-1"></i>Inactive
                                        </span>
                                    }
                                </td>
                                <td>
                                    <div class="small">
                                        <div><i class="fas fa-calendar me-1"></i>@product.PCreatedDate.ToString("dd/MM/yyyy")</div>
                                        <div class="text-muted"><i class="fas fa-clock me-1"></i>@product.PCreatedDate.ToString("HH:mm")</div>
                                    </div>
                                </td>
                                <td class="text-center">
                                    <div class="btn-group btn-group-sm">
                                        <a href="/CollectionProducts/Edit/@product.PID" class="btn btn-outline-primary" title="Edit">
                                            <i class="fas fa-edit"></i>
                                        </a>
                                        <button class="btn btn-outline-info" onclick="viewProduct(@product.PID)" title="View">
                                            <i class="fas fa-eye"></i>
                                        </button>
                                        <button class="btn btn-outline-@(product.PIsValid ? "warning" : "success")"
                                                onclick="toggleProductStatus(@product.PID, @product.PIsValid.ToString().ToLower())"
                                                title="@(product.PIsValid ? "Deactivate" : "Activate")">
                                            <i class="fas fa-toggle-@(product.PIsValid ? "on" : "off")"></i>
                                        </button>
                                        <button class="btn btn-outline-danger" onclick="deleteProduct(@product.PID)" title="Delete">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@if (!Model.Any())
{
    <div class="card mt-4">
        <div class="card-body text-center py-5">
            <i class="fas fa-box fa-4x text-muted mb-3"></i>
            <h4>No Collection Products Found</h4>
            <p class="text-muted">Get started by creating your first collection product.</p>
            <a href="/CollectionProducts/Create" class="btn btn-info">
                <i class="fas fa-plus me-2"></i>Create First Product
            </a>
        </div>
    </div>
}

@section Scripts {
    <script>
        // View mode toggle
        document.getElementById('gridView').addEventListener('change', function() {
            if (this.checked) {
                document.getElementById('gridViewContent').style.display = 'block';
                document.getElementById('tableViewContent').style.display = 'none';
            }
        });

        document.getElementById('tableView').addEventListener('change', function() {
            if (this.checked) {
                document.getElementById('gridViewContent').style.display = 'none';
                document.getElementById('tableViewContent').style.display = 'block';
            }
        });

        function toggleProductStatus(id, currentStatus) {
            if (confirm('Are you sure you want to change the status of this collection product?')) {
                // Add toggle functionality here
                alert('Toggle functionality not implemented yet');
            }
        }

        function deleteProduct(id) {
            if (confirm('Are you sure you want to delete this collection product? This action cannot be undone.')) {
                // Add delete functionality here
                alert('Delete functionality not implemented yet');
            }
        }

        function viewProduct(id) {
            // Add view functionality here
            window.open('/CollectionProducts/Details/' + id, '_blank');
        }

        // Search and filter functionality
        document.getElementById('searchInput').addEventListener('keyup', filterProducts);
        document.getElementById('codeFilter').addEventListener('keyup', filterProducts);
        document.getElementById('statusFilter').addEventListener('change', filterProducts);

        function filterProducts() {
            const searchValue = document.getElementById('searchInput').value.toLowerCase();
            const codeValue = document.getElementById('codeFilter').value.toLowerCase();
            const statusValue = document.getElementById('statusFilter').value;

            // Filter grid view
            const gridItems = document.querySelectorAll('#productsGrid > div');
            gridItems.forEach(item => {
                const text = item.textContent.toLowerCase();
                const code = item.getAttribute('data-code') || '';
                const status = item.getAttribute('data-status');

                const matchesSearch = text.includes(searchValue);
                const matchesCode = code.toLowerCase().includes(codeValue);
                const matchesStatus = !statusValue || status === statusValue;

                if (matchesSearch && matchesCode && matchesStatus) {
                    item.style.display = '';
                } else {
                    item.style.display = 'none';
                }
            });

            // Filter table view
            const tableRows = document.querySelectorAll('#productsTable tbody tr');
            tableRows.forEach(row => {
                const text = row.textContent.toLowerCase();
                const code = row.getAttribute('data-code') || '';
                const status = row.getAttribute('data-status');

                const matchesSearch = text.includes(searchValue);
                const matchesCode = code.toLowerCase().includes(codeValue);
                const matchesStatus = !statusValue || status === statusValue;

                if (matchesSearch && matchesCode && matchesStatus) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        }

        function clearFilters() {
            document.getElementById('searchInput').value = '';
            document.getElementById('codeFilter').value = '';
            document.getElementById('statusFilter').value = '';
            filterProducts();
        }

        // Product card hover effects
        document.addEventListener('DOMContentLoaded', function() {
            const cards = document.querySelectorAll('.product-card');
            cards.forEach(card => {
                card.addEventListener('mouseenter', function() {
                    this.style.transform = 'translateY(-5px)';
                    this.style.boxShadow = '0 8px 25px rgba(0,0,0,0.15)';
                });

                card.addEventListener('mouseleave', function() {
                    this.style.transform = 'translateY(0)';
                    this.style.boxShadow = '';
                });
            });
        });
    </script>
}